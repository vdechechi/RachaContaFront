/*!
 * devextreme-vue
 * Version: 24.1.4
 * Build date: Mon Jul 15 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxCalendar = void 0;
const calendar_1 = __importDefault(require("devextreme/ui/calendar"));
const index_1 = require("./core/index");
const DxCalendar = (0, index_1.createComponent)({
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        cellTemplate: {},
        dateSerializationFormat: String,
        disabled: Boolean,
        disabledDates: [Array, Function],
        elementAttr: Object,
        firstDayOfWeek: {
            type: Number,
            validator: (v) => typeof (v) !== "number" || [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ].indexOf(v) !== -1
        },
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        isDirty: Boolean,
        isValid: Boolean,
        max: [Date, Number, String],
        maxZoomLevel: String,
        min: [Date, Number, String],
        minZoomLevel: String,
        name: String,
        onDisposing: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        readOnly: Boolean,
        rtlEnabled: Boolean,
        selectionMode: String,
        selectWeekOnClick: Boolean,
        showTodayButton: Boolean,
        showWeekNumbers: Boolean,
        tabIndex: Number,
        validationError: {},
        validationErrors: Array,
        validationMessageMode: String,
        validationMessagePosition: String,
        validationStatus: String,
        value: [Array, Date, Number, String],
        visible: Boolean,
        weekNumberRule: String,
        width: [Function, Number, String],
        zoomLevel: String
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:cellTemplate": null,
        "update:dateSerializationFormat": null,
        "update:disabled": null,
        "update:disabledDates": null,
        "update:elementAttr": null,
        "update:firstDayOfWeek": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:isDirty": null,
        "update:isValid": null,
        "update:max": null,
        "update:maxZoomLevel": null,
        "update:min": null,
        "update:minZoomLevel": null,
        "update:name": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onValueChanged": null,
        "update:readOnly": null,
        "update:rtlEnabled": null,
        "update:selectionMode": null,
        "update:selectWeekOnClick": null,
        "update:showTodayButton": null,
        "update:showWeekNumbers": null,
        "update:tabIndex": null,
        "update:validationError": null,
        "update:validationErrors": null,
        "update:validationMessageMode": null,
        "update:validationMessagePosition": null,
        "update:validationStatus": null,
        "update:value": null,
        "update:visible": null,
        "update:weekNumberRule": null,
        "update:width": null,
        "update:zoomLevel": null,
    },
    model: { prop: "value", event: "update:value" },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = calendar_1.default;
        this.$_hasAsyncTemplate = true;
    }
});
exports.DxCalendar = DxCalendar;
exports.default = DxCalendar;
