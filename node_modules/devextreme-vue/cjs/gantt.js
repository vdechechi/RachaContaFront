/*!
 * devextreme-vue
 * Version: 24.1.4
 * Build date: Mon Jul 15 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxValidation = exports.DxToolbarItem = exports.DxToolbar = exports.DxTexts = exports.DxTasks = exports.DxStripLine = exports.DxSorting = exports.DxSearch = exports.DxScaleTypeRange = exports.DxResources = exports.DxResourceAssignments = exports.DxOperationDescriptions = exports.DxItem = exports.DxHeaderFilter = exports.DxGanttHeaderFilterSearch = exports.DxGanttHeaderFilter = exports.DxFormat = exports.DxFilterRow = exports.DxEditing = exports.DxDependencies = exports.DxContextMenuItem = exports.DxContextMenu = exports.DxColumnHeaderFilterSearch = exports.DxColumnHeaderFilter = exports.DxColumn = exports.DxGantt = void 0;
const gantt_1 = __importDefault(require("devextreme/ui/gantt"));
const index_1 = require("./core/index");
const index_2 = require("./core/index");
const DxGantt = (0, index_1.createComponent)({
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowSelection: Boolean,
        columns: Array,
        contextMenu: Object,
        dependencies: Object,
        disabled: Boolean,
        editing: Object,
        elementAttr: Object,
        endDateRange: Date,
        filterRow: Object,
        firstDayOfWeek: {
            type: Number,
            validator: (v) => typeof (v) !== "number" || [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ].indexOf(v) !== -1
        },
        focusStateEnabled: Boolean,
        headerFilter: Object,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        onContentReady: Function,
        onContextMenuPreparing: Function,
        onCustomCommand: Function,
        onDependencyDeleted: Function,
        onDependencyDeleting: Function,
        onDependencyInserted: Function,
        onDependencyInserting: Function,
        onDisposing: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onResourceAssigned: Function,
        onResourceAssigning: Function,
        onResourceDeleted: Function,
        onResourceDeleting: Function,
        onResourceInserted: Function,
        onResourceInserting: Function,
        onResourceManagerDialogShowing: Function,
        onResourceUnassigned: Function,
        onResourceUnassigning: Function,
        onScaleCellPrepared: Function,
        onSelectionChanged: Function,
        onTaskClick: Function,
        onTaskDblClick: Function,
        onTaskDeleted: Function,
        onTaskDeleting: Function,
        onTaskEditDialogShowing: Function,
        onTaskInserted: Function,
        onTaskInserting: Function,
        onTaskMoving: Function,
        onTaskUpdated: Function,
        onTaskUpdating: Function,
        resourceAssignments: Object,
        resources: Object,
        rootValue: {},
        scaleType: String,
        scaleTypeRange: Object,
        selectedRowKey: {},
        showDependencies: Boolean,
        showResources: Boolean,
        showRowLines: Boolean,
        sorting: Object,
        startDateRange: Date,
        stripLines: Array,
        tabIndex: Number,
        taskContentTemplate: {},
        taskListWidth: Number,
        taskProgressTooltipContentTemplate: {},
        tasks: Object,
        taskTimeTooltipContentTemplate: {},
        taskTitlePosition: String,
        taskTooltipContentTemplate: {},
        toolbar: Object,
        validation: Object,
        visible: Boolean,
        width: [Function, Number, String]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowSelection": null,
        "update:columns": null,
        "update:contextMenu": null,
        "update:dependencies": null,
        "update:disabled": null,
        "update:editing": null,
        "update:elementAttr": null,
        "update:endDateRange": null,
        "update:filterRow": null,
        "update:firstDayOfWeek": null,
        "update:focusStateEnabled": null,
        "update:headerFilter": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:onContentReady": null,
        "update:onContextMenuPreparing": null,
        "update:onCustomCommand": null,
        "update:onDependencyDeleted": null,
        "update:onDependencyDeleting": null,
        "update:onDependencyInserted": null,
        "update:onDependencyInserting": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onResourceAssigned": null,
        "update:onResourceAssigning": null,
        "update:onResourceDeleted": null,
        "update:onResourceDeleting": null,
        "update:onResourceInserted": null,
        "update:onResourceInserting": null,
        "update:onResourceManagerDialogShowing": null,
        "update:onResourceUnassigned": null,
        "update:onResourceUnassigning": null,
        "update:onScaleCellPrepared": null,
        "update:onSelectionChanged": null,
        "update:onTaskClick": null,
        "update:onTaskDblClick": null,
        "update:onTaskDeleted": null,
        "update:onTaskDeleting": null,
        "update:onTaskEditDialogShowing": null,
        "update:onTaskInserted": null,
        "update:onTaskInserting": null,
        "update:onTaskMoving": null,
        "update:onTaskUpdated": null,
        "update:onTaskUpdating": null,
        "update:resourceAssignments": null,
        "update:resources": null,
        "update:rootValue": null,
        "update:scaleType": null,
        "update:scaleTypeRange": null,
        "update:selectedRowKey": null,
        "update:showDependencies": null,
        "update:showResources": null,
        "update:showRowLines": null,
        "update:sorting": null,
        "update:startDateRange": null,
        "update:stripLines": null,
        "update:tabIndex": null,
        "update:taskContentTemplate": null,
        "update:taskListWidth": null,
        "update:taskProgressTooltipContentTemplate": null,
        "update:tasks": null,
        "update:taskTimeTooltipContentTemplate": null,
        "update:taskTitlePosition": null,
        "update:taskTooltipContentTemplate": null,
        "update:toolbar": null,
        "update:validation": null,
        "update:visible": null,
        "update:width": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = gantt_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            column: { isCollectionItem: true, optionName: "columns" },
            contextMenu: { isCollectionItem: false, optionName: "contextMenu" },
            dependencies: { isCollectionItem: false, optionName: "dependencies" },
            editing: { isCollectionItem: false, optionName: "editing" },
            filterRow: { isCollectionItem: false, optionName: "filterRow" },
            ganttHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
            headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
            resourceAssignments: { isCollectionItem: false, optionName: "resourceAssignments" },
            resources: { isCollectionItem: false, optionName: "resources" },
            scaleTypeRange: { isCollectionItem: false, optionName: "scaleTypeRange" },
            sorting: { isCollectionItem: false, optionName: "sorting" },
            stripLine: { isCollectionItem: true, optionName: "stripLines" },
            tasks: { isCollectionItem: false, optionName: "tasks" },
            toolbar: { isCollectionItem: false, optionName: "toolbar" },
            validation: { isCollectionItem: false, optionName: "validation" }
        };
    }
});
exports.DxGantt = DxGantt;
const DxColumn = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:allowFiltering": null,
        "update:allowHeaderFiltering": null,
        "update:allowSorting": null,
        "update:calculateCellValue": null,
        "update:calculateDisplayValue": null,
        "update:calculateFilterExpression": null,
        "update:calculateSortValue": null,
        "update:caption": null,
        "update:cellTemplate": null,
        "update:cssClass": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:encodeHtml": null,
        "update:falseText": null,
        "update:filterOperations": null,
        "update:filterType": null,
        "update:filterValue": null,
        "update:filterValues": null,
        "update:format": null,
        "update:headerCellTemplate": null,
        "update:headerFilter": null,
        "update:minWidth": null,
        "update:selectedFilterOperation": null,
        "update:sortIndex": null,
        "update:sortingMethod": null,
        "update:sortOrder": null,
        "update:trueText": null,
        "update:visible": null,
        "update:visibleIndex": null,
        "update:width": null,
    },
    props: {
        alignment: String,
        allowFiltering: Boolean,
        allowHeaderFiltering: Boolean,
        allowSorting: Boolean,
        calculateCellValue: Function,
        calculateDisplayValue: [Function, String],
        calculateFilterExpression: Function,
        calculateSortValue: [Function, String],
        caption: String,
        cellTemplate: {},
        cssClass: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        encodeHtml: Boolean,
        falseText: String,
        filterOperations: Array,
        filterType: String,
        filterValue: {},
        filterValues: Array,
        format: [Object, Function, String],
        headerCellTemplate: {},
        headerFilter: Object,
        minWidth: Number,
        selectedFilterOperation: String,
        sortIndex: Number,
        sortingMethod: Function,
        sortOrder: String,
        trueText: String,
        visible: Boolean,
        visibleIndex: Number,
        width: [Number, String]
    }
});
exports.DxColumn = DxColumn;
DxColumn.$_optionName = "columns";
DxColumn.$_isCollectionItem = true;
DxColumn.$_expectedChildren = {
    columnHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
    format: { isCollectionItem: false, optionName: "format" },
    headerFilter: { isCollectionItem: false, optionName: "headerFilter" }
};
const DxColumnHeaderFilter = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:allowSelectAll": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:search": null,
        "update:searchMode": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        allowSelectAll: Boolean,
        dataSource: {},
        groupInterval: [Number, String],
        height: [Number, String],
        search: Object,
        searchMode: String,
        width: [Number, String]
    }
});
exports.DxColumnHeaderFilter = DxColumnHeaderFilter;
DxColumnHeaderFilter.$_optionName = "headerFilter";
DxColumnHeaderFilter.$_expectedChildren = {
    columnHeaderFilterSearch: { isCollectionItem: false, optionName: "search" },
    search: { isCollectionItem: false, optionName: "search" }
};
const DxColumnHeaderFilterSearch = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editorOptions": null,
        "update:enabled": null,
        "update:mode": null,
        "update:searchExpr": null,
        "update:timeout": null,
    },
    props: {
        editorOptions: {},
        enabled: Boolean,
        mode: String,
        searchExpr: [Array, Function, String],
        timeout: Number
    }
});
exports.DxColumnHeaderFilterSearch = DxColumnHeaderFilterSearch;
DxColumnHeaderFilterSearch.$_optionName = "search";
const DxContextMenu = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:items": null,
    },
    props: {
        enabled: Boolean,
        items: Array
    }
});
exports.DxContextMenu = DxContextMenu;
DxContextMenu.$_optionName = "contextMenu";
DxContextMenu.$_expectedChildren = {
    contextMenuItem: { isCollectionItem: true, optionName: "items" },
    item: { isCollectionItem: true, optionName: "items" }
};
const DxContextMenuItem = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:beginGroup": null,
        "update:closeMenuOnClick": null,
        "update:disabled": null,
        "update:icon": null,
        "update:items": null,
        "update:name": null,
        "update:selectable": null,
        "update:selected": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        beginGroup: Boolean,
        closeMenuOnClick: Boolean,
        disabled: Boolean,
        icon: String,
        items: Array,
        name: String,
        selectable: Boolean,
        selected: Boolean,
        template: {},
        text: String,
        visible: Boolean
    }
});
exports.DxContextMenuItem = DxContextMenuItem;
DxContextMenuItem.$_optionName = "items";
DxContextMenuItem.$_isCollectionItem = true;
const DxDependencies = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:dataSource": null,
        "update:keyExpr": null,
        "update:predecessorIdExpr": null,
        "update:successorIdExpr": null,
        "update:typeExpr": null,
    },
    props: {
        dataSource: {},
        keyExpr: [Function, String],
        predecessorIdExpr: [Function, String],
        successorIdExpr: [Function, String],
        typeExpr: [Function, String]
    }
});
exports.DxDependencies = DxDependencies;
DxDependencies.$_optionName = "dependencies";
const DxEditing = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDependencyAdding": null,
        "update:allowDependencyDeleting": null,
        "update:allowResourceAdding": null,
        "update:allowResourceDeleting": null,
        "update:allowResourceUpdating": null,
        "update:allowTaskAdding": null,
        "update:allowTaskDeleting": null,
        "update:allowTaskResourceUpdating": null,
        "update:allowTaskUpdating": null,
        "update:enabled": null,
    },
    props: {
        allowDependencyAdding: Boolean,
        allowDependencyDeleting: Boolean,
        allowResourceAdding: Boolean,
        allowResourceDeleting: Boolean,
        allowResourceUpdating: Boolean,
        allowTaskAdding: Boolean,
        allowTaskDeleting: Boolean,
        allowTaskResourceUpdating: Boolean,
        allowTaskUpdating: Boolean,
        enabled: Boolean
    }
});
exports.DxEditing = DxEditing;
DxEditing.$_optionName = "editing";
const DxFilterRow = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:betweenEndText": null,
        "update:betweenStartText": null,
        "update:operationDescriptions": null,
        "update:resetOperationText": null,
        "update:showAllText": null,
        "update:showOperationChooser": null,
        "update:visible": null,
    },
    props: {
        betweenEndText: String,
        betweenStartText: String,
        operationDescriptions: Object,
        resetOperationText: String,
        showAllText: String,
        showOperationChooser: Boolean,
        visible: Boolean
    }
});
exports.DxFilterRow = DxFilterRow;
DxFilterRow.$_optionName = "filterRow";
DxFilterRow.$_expectedChildren = {
    operationDescriptions: { isCollectionItem: false, optionName: "operationDescriptions" }
};
const DxFormat = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
});
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
const DxGanttHeaderFilter = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:allowSelectAll": null,
        "update:height": null,
        "update:search": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        allowSelectAll: Boolean,
        height: Number,
        search: Object,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: Number
    }
});
exports.DxGanttHeaderFilter = DxGanttHeaderFilter;
DxGanttHeaderFilter.$_optionName = "headerFilter";
DxGanttHeaderFilter.$_expectedChildren = {
    ganttHeaderFilterSearch: { isCollectionItem: false, optionName: "search" },
    search: { isCollectionItem: false, optionName: "search" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
const DxGanttHeaderFilterSearch = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editorOptions": null,
        "update:enabled": null,
        "update:mode": null,
        "update:timeout": null,
    },
    props: {
        editorOptions: {},
        enabled: Boolean,
        mode: String,
        timeout: Number
    }
});
exports.DxGanttHeaderFilterSearch = DxGanttHeaderFilterSearch;
DxGanttHeaderFilterSearch.$_optionName = "search";
const DxHeaderFilter = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:allowSelectAll": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:search": null,
        "update:searchMode": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        allowSelectAll: Boolean,
        dataSource: {},
        groupInterval: [Number, String],
        height: [Number, String],
        search: Object,
        searchMode: String,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: [Number, String]
    }
});
exports.DxHeaderFilter = DxHeaderFilter;
DxHeaderFilter.$_optionName = "headerFilter";
const DxItem = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:beginGroup": null,
        "update:closeMenuOnClick": null,
        "update:cssClass": null,
        "update:disabled": null,
        "update:html": null,
        "update:icon": null,
        "update:items": null,
        "update:locateInMenu": null,
        "update:location": null,
        "update:menuItemTemplate": null,
        "update:name": null,
        "update:options": null,
        "update:selectable": null,
        "update:selected": null,
        "update:showText": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
        "update:widget": null,
    },
    props: {
        beginGroup: Boolean,
        closeMenuOnClick: Boolean,
        cssClass: String,
        disabled: Boolean,
        html: String,
        icon: String,
        items: Array,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: {},
        selectable: Boolean,
        selected: Boolean,
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
const DxOperationDescriptions = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:between": null,
        "update:contains": null,
        "update:endsWith": null,
        "update:equal": null,
        "update:greaterThan": null,
        "update:greaterThanOrEqual": null,
        "update:lessThan": null,
        "update:lessThanOrEqual": null,
        "update:notContains": null,
        "update:notEqual": null,
        "update:startsWith": null,
    },
    props: {
        between: String,
        contains: String,
        endsWith: String,
        equal: String,
        greaterThan: String,
        greaterThanOrEqual: String,
        lessThan: String,
        lessThanOrEqual: String,
        notContains: String,
        notEqual: String,
        startsWith: String
    }
});
exports.DxOperationDescriptions = DxOperationDescriptions;
DxOperationDescriptions.$_optionName = "operationDescriptions";
const DxResourceAssignments = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:dataSource": null,
        "update:keyExpr": null,
        "update:resourceIdExpr": null,
        "update:taskIdExpr": null,
    },
    props: {
        dataSource: {},
        keyExpr: [Function, String],
        resourceIdExpr: [Function, String],
        taskIdExpr: [Function, String]
    }
});
exports.DxResourceAssignments = DxResourceAssignments;
DxResourceAssignments.$_optionName = "resourceAssignments";
const DxResources = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colorExpr": null,
        "update:dataSource": null,
        "update:keyExpr": null,
        "update:textExpr": null,
    },
    props: {
        colorExpr: [Function, String],
        dataSource: {},
        keyExpr: [Function, String],
        textExpr: [Function, String]
    }
});
exports.DxResources = DxResources;
DxResources.$_optionName = "resources";
const DxScaleTypeRange = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:max": null,
        "update:min": null,
    },
    props: {
        max: String,
        min: String
    }
});
exports.DxScaleTypeRange = DxScaleTypeRange;
DxScaleTypeRange.$_optionName = "scaleTypeRange";
const DxSearch = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editorOptions": null,
        "update:enabled": null,
        "update:mode": null,
        "update:searchExpr": null,
        "update:timeout": null,
    },
    props: {
        editorOptions: {},
        enabled: Boolean,
        mode: String,
        searchExpr: [Array, Function, String],
        timeout: Number
    }
});
exports.DxSearch = DxSearch;
DxSearch.$_optionName = "search";
const DxSorting = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ascendingText": null,
        "update:clearText": null,
        "update:descendingText": null,
        "update:mode": null,
        "update:showSortIndexes": null,
    },
    props: {
        ascendingText: String,
        clearText: String,
        descendingText: String,
        mode: String,
        showSortIndexes: Boolean
    }
});
exports.DxSorting = DxSorting;
DxSorting.$_optionName = "sorting";
const DxStripLine = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cssClass": null,
        "update:end": null,
        "update:start": null,
        "update:title": null,
    },
    props: {
        cssClass: String,
        end: [Date, Function, Number, String],
        start: [Date, Function, Number, String],
        title: String
    }
});
exports.DxStripLine = DxStripLine;
DxStripLine.$_optionName = "stripLines";
DxStripLine.$_isCollectionItem = true;
const DxTasks = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colorExpr": null,
        "update:dataSource": null,
        "update:endExpr": null,
        "update:keyExpr": null,
        "update:parentIdExpr": null,
        "update:progressExpr": null,
        "update:startExpr": null,
        "update:titleExpr": null,
    },
    props: {
        colorExpr: [Function, String],
        dataSource: {},
        endExpr: [Function, String],
        keyExpr: [Function, String],
        parentIdExpr: [Function, String],
        progressExpr: [Function, String],
        startExpr: [Function, String],
        titleExpr: [Function, String]
    }
});
exports.DxTasks = DxTasks;
DxTasks.$_optionName = "tasks";
const DxTexts = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cancel": null,
        "update:emptyValue": null,
        "update:ok": null,
    },
    props: {
        cancel: String,
        emptyValue: String,
        ok: String
    }
});
exports.DxTexts = DxTexts;
DxTexts.$_optionName = "texts";
const DxToolbar = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:items": null,
    },
    props: {
        items: Array
    }
});
exports.DxToolbar = DxToolbar;
DxToolbar.$_optionName = "toolbar";
DxToolbar.$_expectedChildren = {
    item: { isCollectionItem: true, optionName: "items" },
    toolbarItem: { isCollectionItem: true, optionName: "items" }
};
const DxToolbarItem = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cssClass": null,
        "update:disabled": null,
        "update:html": null,
        "update:locateInMenu": null,
        "update:location": null,
        "update:menuItemTemplate": null,
        "update:name": null,
        "update:options": null,
        "update:showText": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
        "update:widget": null,
    },
    props: {
        cssClass: String,
        disabled: Boolean,
        html: String,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        name: String,
        options: {},
        showText: String,
        template: {},
        text: String,
        visible: Boolean,
        widget: String
    }
});
exports.DxToolbarItem = DxToolbarItem;
DxToolbarItem.$_optionName = "items";
DxToolbarItem.$_isCollectionItem = true;
const DxValidation = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:autoUpdateParentTasks": null,
        "update:enablePredecessorGap": null,
        "update:validateDependencies": null,
    },
    props: {
        autoUpdateParentTasks: Boolean,
        enablePredecessorGap: Boolean,
        validateDependencies: Boolean
    }
});
exports.DxValidation = DxValidation;
DxValidation.$_optionName = "validation";
exports.default = DxGantt;
