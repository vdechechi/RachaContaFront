/*!
 * devextreme-vue
 * Version: 24.1.4
 * Build date: Mon Jul 15 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxItem = exports.DxTileView = void 0;
const tile_view_1 = __importDefault(require("devextreme/ui/tile_view"));
const index_1 = require("./core/index");
const index_2 = require("./core/index");
const DxTileView = (0, index_1.createComponent)({
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        baseItemHeight: Number,
        baseItemWidth: Number,
        dataSource: {},
        direction: String,
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        itemHoldTimeout: Number,
        itemMargin: Number,
        items: Array,
        itemTemplate: {},
        noDataText: String,
        onContentReady: Function,
        onDisposing: Function,
        onInitialized: Function,
        onItemClick: Function,
        onItemContextMenu: Function,
        onItemHold: Function,
        onItemRendered: Function,
        onOptionChanged: Function,
        rtlEnabled: Boolean,
        showScrollbar: String,
        tabIndex: Number,
        visible: Boolean,
        width: [Function, Number, String]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:baseItemHeight": null,
        "update:baseItemWidth": null,
        "update:dataSource": null,
        "update:direction": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:itemHoldTimeout": null,
        "update:itemMargin": null,
        "update:items": null,
        "update:itemTemplate": null,
        "update:noDataText": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onItemClick": null,
        "update:onItemContextMenu": null,
        "update:onItemHold": null,
        "update:onItemRendered": null,
        "update:onOptionChanged": null,
        "update:rtlEnabled": null,
        "update:showScrollbar": null,
        "update:tabIndex": null,
        "update:visible": null,
        "update:width": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = tile_view_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            item: { isCollectionItem: true, optionName: "items" }
        };
    }
});
exports.DxTileView = DxTileView;
const DxItem = (0, index_2.createConfigurationComponent)({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:disabled": null,
        "update:heightRatio": null,
        "update:html": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
        "update:widthRatio": null,
    },
    props: {
        disabled: Boolean,
        heightRatio: Number,
        html: String,
        template: {},
        text: String,
        visible: Boolean,
        widthRatio: Number
    }
});
exports.DxItem = DxItem;
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
exports.default = DxTileView;
