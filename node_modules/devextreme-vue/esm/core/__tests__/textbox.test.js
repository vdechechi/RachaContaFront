/*!
 * devextreme-vue
 * Version: 24.1.4
 * Build date: Mon Jul 15 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { mount } from '@vue/test-utils';
import { defineComponent, nextTick } from 'vue';
import DxTextBox from '../../text-box';
jest.setTimeout(1000);
beforeEach(() => {
    jest.clearAllMocks();
});
describe('two-way binding', () => {
    it('v-model works correctly', async () => {
        expect.assertions(1);
        const vm = defineComponent({
            template: `<dx-text-box id="component1" v-model="testValue"></dx-text-box>
                 <dx-text-box id="component2" v-model="testValue"></dx-text-box>
                `,
            components: {
                DxTextBox,
            },
            data() {
                return {
                    testValue: 'value',
                };
            },
        });
        const wrapper = mount(vm);
        const component = wrapper.getComponent('#component2').vm;
        component.$_config.updateValue = jest.fn();
        wrapper.getComponent('#component1').vm.$emit('update:modelValue', 'newValue');
        await nextTick(() => {
            expect(component.$_config.updateValue).toBeCalled();
        });
    });
    it('v-model with argument works correctly', async () => {
        expect.assertions(1);
        const vm = defineComponent({
            template: `<dx-text-box id="component1" v-model:value="testValue"></dx-text-box>
                 <dx-text-box id="component2" v-model:value="testValue"></dx-text-box>
                `,
            components: {
                DxTextBox,
            },
            props: {
                testValue: String,
            },
        });
        const wrapper = mount(vm);
        const component = wrapper.getComponent('#component2').vm;
        component.$_config.updateValue = jest.fn();
        await wrapper.setProps({ testValue: 'test' });
        await nextTick(() => {
            expect(component.$_config.updateValue).toBeCalled();
        });
    });
});
