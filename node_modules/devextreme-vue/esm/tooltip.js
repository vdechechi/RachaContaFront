/*!
 * devextreme-vue
 * Version: 24.1.4
 * Build date: Mon Jul 15 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import Tooltip from "devextreme/ui/tooltip";
import { createComponent } from "./core/index";
import { createConfigurationComponent } from "./core/index";
const DxTooltip = createComponent({
    props: {
        animation: Object,
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        contentTemplate: {},
        deferRendering: Boolean,
        disabled: Boolean,
        height: [Function, Number, String],
        hideEvent: [Object, String],
        hideOnOutsideClick: [Boolean, Function],
        hideOnParentScroll: Boolean,
        hint: String,
        hoverStateEnabled: Boolean,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onShowing: Function,
        onShown: Function,
        position: [Object, String],
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showEvent: [Object, String],
        target: {},
        visible: Boolean,
        width: [Function, Number, String],
        wrapperAttr: {}
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:animation": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:height": null,
        "update:hideEvent": null,
        "update:hideOnOutsideClick": null,
        "update:hideOnParentScroll": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:position": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showEvent": null,
        "update:target": null,
        "update:visible": null,
        "update:width": null,
        "update:wrapperAttr": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = Tooltip;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            animation: { isCollectionItem: false, optionName: "animation" },
            hideEvent: { isCollectionItem: false, optionName: "hideEvent" },
            position: { isCollectionItem: false, optionName: "position" },
            showEvent: { isCollectionItem: false, optionName: "showEvent" }
        };
    }
});
const DxAnimation = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null,
    },
    props: {
        hide: [Object, Number, String],
        show: [Object, Number, String]
    }
});
DxAnimation.$_optionName = "animation";
DxAnimation.$_expectedChildren = {
    hide: { isCollectionItem: false, optionName: "hide" },
    show: { isCollectionItem: false, optionName: "show" }
};
const DxAt = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
DxAt.$_optionName = "at";
const DxBoundaryOffset = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
});
DxBoundaryOffset.$_optionName = "boundaryOffset";
const DxCollision = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
DxCollision.$_optionName = "collision";
const DxFrom = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
});
DxFrom.$_optionName = "from";
DxFrom.$_expectedChildren = {
    position: { isCollectionItem: false, optionName: "position" }
};
const DxHide = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
});
DxHide.$_optionName = "hide";
DxHide.$_expectedChildren = {
    from: { isCollectionItem: false, optionName: "from" },
    to: { isCollectionItem: false, optionName: "to" }
};
const DxHideEvent = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:delay": null,
        "update:name": null,
    },
    props: {
        delay: Number,
        name: String
    }
});
DxHideEvent.$_optionName = "hideEvent";
const DxMy = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
});
DxMy.$_optionName = "my";
const DxOffset = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
});
DxOffset.$_optionName = "offset";
const DxPosition = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:at": null,
        "update:boundary": null,
        "update:boundaryOffset": null,
        "update:collision": null,
        "update:my": null,
        "update:of": null,
        "update:offset": null,
    },
    props: {
        at: [Object, String],
        boundary: {},
        boundaryOffset: [Object, String],
        collision: [Object, String],
        my: [Object, String],
        of: {},
        offset: [Object, String]
    }
});
DxPosition.$_optionName = "position";
const DxShow = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
});
DxShow.$_optionName = "show";
const DxShowEvent = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:delay": null,
        "update:name": null,
    },
    props: {
        delay: Number,
        name: String
    }
});
DxShowEvent.$_optionName = "showEvent";
const DxTo = createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
});
DxTo.$_optionName = "to";
export default DxTooltip;
export { DxTooltip, DxAnimation, DxAt, DxBoundaryOffset, DxCollision, DxFrom, DxHide, DxHideEvent, DxMy, DxOffset, DxPosition, DxShow, DxShowEvent, DxTo };
