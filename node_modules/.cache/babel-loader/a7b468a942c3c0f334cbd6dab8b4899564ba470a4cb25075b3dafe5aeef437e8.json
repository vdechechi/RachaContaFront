{"ast":null,"code":"import DxDrawer from \"devextreme-vue/drawer\";\nimport DxScrollView from \"devextreme-vue/scroll-view\";\nimport menuItems from \"../app-navigation\";\nimport HeaderToolbar from \"../components/header-toolbar\";\nimport SideNavMenu from \"../components/side-nav-menu\";\nimport { computed, ref, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nexport default {\n  props: {\n    title: String,\n    isXSmall: Boolean,\n    isLarge: Boolean\n  },\n  setup(props) {\n    const route = useRoute();\n    const scrollViewRef = ref(null);\n    const menuOpened = ref(props.isLarge);\n    const menuTemporaryOpened = ref(false);\n    function toggleMenu(e) {\n      const pointerEvent = e.event;\n      pointerEvent.stopPropagation();\n      if (menuOpened.value) {\n        menuTemporaryOpened.value = false;\n      }\n      menuOpened.value = !menuOpened.value;\n    }\n    function handleSideBarClick() {\n      if (menuOpened.value === false) {\n        menuTemporaryOpened.value = true;\n      }\n      menuOpened.value = true;\n    }\n    const drawerOptions = computed(() => {\n      const shaderEnabled = !props.isLarge;\n      return {\n        menuMode: props.isLarge ? \"shrink\" : \"overlap\",\n        menuRevealMode: props.isXSmall ? \"slide\" : \"expand\",\n        minMenuSize: props.isXSmall ? 0 : 60,\n        maxMenuSize: props.isXSmall ? 250 : undefined,\n        closeOnOutsideClick: shaderEnabled,\n        shaderEnabled\n      };\n    });\n    watch(() => props.isLarge, () => {\n      if (!menuTemporaryOpened.value) {\n        menuOpened.value = props.isLarge;\n      }\n    });\n    watch(() => route.path, () => {\n      if (menuTemporaryOpened.value || !props.isLarge) {\n        menuOpened.value = false;\n        menuTemporaryOpened.value = false;\n      }\n      scrollViewRef.value.instance.scrollTo(0);\n    });\n    return {\n      menuOpened,\n      menuItems,\n      toggleMenu,\n      handleSideBarClick,\n      drawerOptions,\n      scrollViewRef\n    };\n  },\n  components: {\n    DxDrawer,\n    DxScrollView,\n    HeaderToolbar,\n    SideNavMenu\n  }\n};","map":{"version":3,"names":["DxDrawer","DxScrollView","menuItems","HeaderToolbar","SideNavMenu","computed","ref","watch","useRoute","props","title","String","isXSmall","Boolean","isLarge","setup","route","scrollViewRef","menuOpened","menuTemporaryOpened","toggleMenu","e","pointerEvent","event","stopPropagation","value","handleSideBarClick","drawerOptions","shaderEnabled","menuMode","menuRevealMode","minMenuSize","maxMenuSize","undefined","closeOnOutsideClick","path","instance","scrollTo","components"],"sources":["C:\\Users\\vinic\\OneDrive\\√Årea de Trabalho\\racha-conta\\front\\src\\layouts\\side-nav-outer-toolbar.vue"],"sourcesContent":["<template>\n  <div class=\"side-nav-outer-toolbar\">\n    <header-toolbar\n      class=\"layout-header\"\n      :menu-toggle-enabled=\"true\"\n      :toggle-menu-func=\"toggleMenu\"\n      :title=\"title\"\n    />\n    <dx-drawer\n      class=\"layout-body\"\n      position=\"before\"\n      template=\"menuTemplate\"\n      v-model:opened=\"menuOpened\"\n      :opened-state-mode=\"drawerOptions.menuMode\"\n      :reveal-mode=\"drawerOptions.menuRevealMode\"\n      :min-size=\"drawerOptions.minMenuSize\"\n      :max-size=\"drawerOptions.maxMenuSize\"\n      :shading=\"drawerOptions.shaderEnabled\"\n      :close-on-outside-click=\"drawerOptions.closeOnOutsideClick\"\n    >\n      <dx-scroll-view ref=\"scrollViewRef\" class=\"with-footer\">\n        <slot />\n        <slot name=\"footer\" />\n      </dx-scroll-view>\n      <template #menuTemplate>\n        <side-nav-menu\n          :compact-mode=\"!menuOpened\"\n          @click=\"handleSideBarClick\"\n        />\n      </template>\n    </dx-drawer>\n  </div>\n</template>\n\n<script>\nimport DxDrawer from \"devextreme-vue/drawer\";\nimport DxScrollView from \"devextreme-vue/scroll-view\";\n\nimport menuItems from \"../app-navigation\";\nimport HeaderToolbar from \"../components/header-toolbar\";\nimport SideNavMenu from \"../components/side-nav-menu\";\nimport { computed, ref, watch} from 'vue';\nimport { useRoute } from 'vue-router';\n\nexport default {\n  props: {\n    title: String,\n    isXSmall: Boolean,\n    isLarge: Boolean\n  },\n  setup(props) {\n    const route = useRoute();\n\n    const scrollViewRef = ref(null);\n    const menuOpened = ref(props.isLarge);\n    const menuTemporaryOpened = ref(false);\n\n    function toggleMenu(e) {\n      const pointerEvent = e.event;\n      pointerEvent.stopPropagation();\n      if (menuOpened.value) {\n        menuTemporaryOpened.value = false;\n      }\n      menuOpened.value = !menuOpened.value;\n    }\n\n    function handleSideBarClick() {\n      if (menuOpened.value === false) {\n        menuTemporaryOpened.value = true;\n      }\n      menuOpened.value = true;\n    }\n\n    const drawerOptions = computed(() => {\n      const shaderEnabled = !props.isLarge;\n\n      return {\n        menuMode: props.isLarge ? \"shrink\" : \"overlap\",\n        menuRevealMode: props.isXSmall ? \"slide\" : \"expand\",\n        minMenuSize: props.isXSmall ? 0 : 60,\n        maxMenuSize: props.isXSmall ? 250 : undefined,\n        closeOnOutsideClick: shaderEnabled,\n        shaderEnabled\n      };\n    });\n\n    watch(\n      () => props.isLarge,\n      () => {\n        if (!menuTemporaryOpened.value) {\n          menuOpened.value = props.isLarge;\n        }\n    });\n\n    watch(\n      () => route.path,\n      () => {\n        if (menuTemporaryOpened.value || !props.isLarge) {\n          menuOpened.value = false;\n          menuTemporaryOpened.value = false;\n        }\n      scrollViewRef.value.instance.scrollTo(0);\n      }\n    );\n\n    return {\n      menuOpened,\n      menuItems,\n      toggleMenu,\n      handleSideBarClick,\n      drawerOptions,\n      scrollViewRef\n    };\n  },\n  components: {\n    DxDrawer,\n    DxScrollView,\n    HeaderToolbar,\n    SideNavMenu\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.side-nav-outer-toolbar {\n  flex-direction: column;\n  display: flex;\n  height: 100%;\n  width: 100%;\n}\n\n.layout-header {\n  z-index: 1501;\n}\n</style>\n"],"mappings":"AAmCA,OAAOA,QAAO,MAAO,uBAAuB;AAC5C,OAAOC,YAAW,MAAO,4BAA4B;AAErD,OAAOC,SAAQ,MAAO,mBAAmB;AACzC,OAAOC,aAAY,MAAO,8BAA8B;AACxD,OAAOC,WAAU,MAAO,6BAA6B;AACrD,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,QAAO,KAAK;AACzC,SAASC,QAAO,QAAS,YAAY;AAErC,eAAe;EACbC,KAAK,EAAE;IACLC,KAAK,EAAEC,MAAM;IACbC,QAAQ,EAAEC,OAAO;IACjBC,OAAO,EAAED;EACX,CAAC;EACDE,KAAKA,CAACN,KAAK,EAAE;IACX,MAAMO,KAAI,GAAIR,QAAQ,CAAC,CAAC;IAExB,MAAMS,aAAY,GAAIX,GAAG,CAAC,IAAI,CAAC;IAC/B,MAAMY,UAAS,GAAIZ,GAAG,CAACG,KAAK,CAACK,OAAO,CAAC;IACrC,MAAMK,mBAAkB,GAAIb,GAAG,CAAC,KAAK,CAAC;IAEtC,SAASc,UAAUA,CAACC,CAAC,EAAE;MACrB,MAAMC,YAAW,GAAID,CAAC,CAACE,KAAK;MAC5BD,YAAY,CAACE,eAAe,CAAC,CAAC;MAC9B,IAAIN,UAAU,CAACO,KAAK,EAAE;QACpBN,mBAAmB,CAACM,KAAI,GAAI,KAAK;MACnC;MACAP,UAAU,CAACO,KAAI,GAAI,CAACP,UAAU,CAACO,KAAK;IACtC;IAEA,SAASC,kBAAkBA,CAAA,EAAG;MAC5B,IAAIR,UAAU,CAACO,KAAI,KAAM,KAAK,EAAE;QAC9BN,mBAAmB,CAACM,KAAI,GAAI,IAAI;MAClC;MACAP,UAAU,CAACO,KAAI,GAAI,IAAI;IACzB;IAEA,MAAME,aAAY,GAAItB,QAAQ,CAAC,MAAM;MACnC,MAAMuB,aAAY,GAAI,CAACnB,KAAK,CAACK,OAAO;MAEpC,OAAO;QACLe,QAAQ,EAAEpB,KAAK,CAACK,OAAM,GAAI,QAAO,GAAI,SAAS;QAC9CgB,cAAc,EAAErB,KAAK,CAACG,QAAO,GAAI,OAAM,GAAI,QAAQ;QACnDmB,WAAW,EAAEtB,KAAK,CAACG,QAAO,GAAI,IAAI,EAAE;QACpCoB,WAAW,EAAEvB,KAAK,CAACG,QAAO,GAAI,GAAE,GAAIqB,SAAS;QAC7CC,mBAAmB,EAAEN,aAAa;QAClCA;MACF,CAAC;IACH,CAAC,CAAC;IAEFrB,KAAK,CACH,MAAME,KAAK,CAACK,OAAO,EACnB,MAAM;MACJ,IAAI,CAACK,mBAAmB,CAACM,KAAK,EAAE;QAC9BP,UAAU,CAACO,KAAI,GAAIhB,KAAK,CAACK,OAAO;MAClC;IACJ,CAAC,CAAC;IAEFP,KAAK,CACH,MAAMS,KAAK,CAACmB,IAAI,EAChB,MAAM;MACJ,IAAIhB,mBAAmB,CAACM,KAAI,IAAK,CAAChB,KAAK,CAACK,OAAO,EAAE;QAC/CI,UAAU,CAACO,KAAI,GAAI,KAAK;QACxBN,mBAAmB,CAACM,KAAI,GAAI,KAAK;MACnC;MACFR,aAAa,CAACQ,KAAK,CAACW,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAAC;IACxC,CACF,CAAC;IAED,OAAO;MACLnB,UAAU;MACVhB,SAAS;MACTkB,UAAU;MACVM,kBAAkB;MAClBC,aAAa;MACbV;IACF,CAAC;EACH,CAAC;EACDqB,UAAU,EAAE;IACVtC,QAAQ;IACRC,YAAY;IACZE,aAAa;IACbC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}